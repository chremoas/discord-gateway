// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: gateway.proto

/*
Package discord_gateway is a generated protocol buffer package.

It is generated from these files:
	gateway.proto

It has these top-level messages:
	NilMessage
	EditRoleRequest
	EditRoleResponse
	SendMessageRequest
	UpdateMemberRequest
	UpdateMemberResponse
	GetAllMembersRequest
	GuildObjectRequest
	GetMembersResponse
	GetRoleResponse
	CreateRoleRequest
	CreateRolesResponse
	DeleteRoleRequest
	DeleteRoleResponse
	GetUserRequest
	GetUserResponse
	Role
	Member
	User
	SendMessageEmbed
	MessageEmbed
	MessageEmbedFooter
	MessageEmbedImage
	MessageEmbedThumbnail
	MessageEmbedVideo
	MessageEmbedProvider
	MessageEmbedAuthor
	MessageEmbedField
*/
package discord_gateway

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DiscordGateway service

type DiscordGatewayService interface {
	UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...client.CallOption) (*UpdateMemberResponse, error)
	GetAllMembers(ctx context.Context, in *GetAllMembersRequest, opts ...client.CallOption) (*GetMembersResponse, error)
	GetAllMembersAsSlice(ctx context.Context, in *GetAllMembersRequest, opts ...client.CallOption) (*GetMembersResponse, error)
	GetAllRoles(ctx context.Context, in *GuildObjectRequest, opts ...client.CallOption) (*GetRoleResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...client.CallOption) (*CreateRolesResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*DeleteRoleResponse, error)
	EditRole(ctx context.Context, in *EditRoleRequest, opts ...client.CallOption) (*EditRoleResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*NilMessage, error)
	SendEmbed(ctx context.Context, in *SendMessageEmbed, opts ...client.CallOption) (*NilMessage, error)
}

type discordGatewayService struct {
	c    client.Client
	name string
}

func NewDiscordGatewayService(name string, c client.Client) DiscordGatewayService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "discord.gateway"
	}
	return &discordGatewayService{
		c:    c,
		name: name,
	}
}

func (c *discordGatewayService) UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...client.CallOption) (*UpdateMemberResponse, error) {
	req := c.c.NewRequest(c.name, "DiscordGateway.UpdateMember", in)
	out := new(UpdateMemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordGatewayService) GetAllMembers(ctx context.Context, in *GetAllMembersRequest, opts ...client.CallOption) (*GetMembersResponse, error) {
	req := c.c.NewRequest(c.name, "DiscordGateway.GetAllMembers", in)
	out := new(GetMembersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordGatewayService) GetAllMembersAsSlice(ctx context.Context, in *GetAllMembersRequest, opts ...client.CallOption) (*GetMembersResponse, error) {
	req := c.c.NewRequest(c.name, "DiscordGateway.GetAllMembersAsSlice", in)
	out := new(GetMembersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordGatewayService) GetAllRoles(ctx context.Context, in *GuildObjectRequest, opts ...client.CallOption) (*GetRoleResponse, error) {
	req := c.c.NewRequest(c.name, "DiscordGateway.GetAllRoles", in)
	out := new(GetRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordGatewayService) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...client.CallOption) (*CreateRolesResponse, error) {
	req := c.c.NewRequest(c.name, "DiscordGateway.CreateRole", in)
	out := new(CreateRolesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordGatewayService) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*DeleteRoleResponse, error) {
	req := c.c.NewRequest(c.name, "DiscordGateway.DeleteRole", in)
	out := new(DeleteRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordGatewayService) EditRole(ctx context.Context, in *EditRoleRequest, opts ...client.CallOption) (*EditRoleResponse, error) {
	req := c.c.NewRequest(c.name, "DiscordGateway.EditRole", in)
	out := new(EditRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordGatewayService) GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error) {
	req := c.c.NewRequest(c.name, "DiscordGateway.GetUser", in)
	out := new(GetUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordGatewayService) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*NilMessage, error) {
	req := c.c.NewRequest(c.name, "DiscordGateway.SendMessage", in)
	out := new(NilMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordGatewayService) SendEmbed(ctx context.Context, in *SendMessageEmbed, opts ...client.CallOption) (*NilMessage, error) {
	req := c.c.NewRequest(c.name, "DiscordGateway.SendEmbed", in)
	out := new(NilMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DiscordGateway service

type DiscordGatewayHandler interface {
	UpdateMember(context.Context, *UpdateMemberRequest, *UpdateMemberResponse) error
	GetAllMembers(context.Context, *GetAllMembersRequest, *GetMembersResponse) error
	GetAllMembersAsSlice(context.Context, *GetAllMembersRequest, *GetMembersResponse) error
	GetAllRoles(context.Context, *GuildObjectRequest, *GetRoleResponse) error
	CreateRole(context.Context, *CreateRoleRequest, *CreateRolesResponse) error
	DeleteRole(context.Context, *DeleteRoleRequest, *DeleteRoleResponse) error
	EditRole(context.Context, *EditRoleRequest, *EditRoleResponse) error
	GetUser(context.Context, *GetUserRequest, *GetUserResponse) error
	SendMessage(context.Context, *SendMessageRequest, *NilMessage) error
	SendEmbed(context.Context, *SendMessageEmbed, *NilMessage) error
}

func RegisterDiscordGatewayHandler(s server.Server, hdlr DiscordGatewayHandler, opts ...server.HandlerOption) {
	type discordGateway interface {
		UpdateMember(ctx context.Context, in *UpdateMemberRequest, out *UpdateMemberResponse) error
		GetAllMembers(ctx context.Context, in *GetAllMembersRequest, out *GetMembersResponse) error
		GetAllMembersAsSlice(ctx context.Context, in *GetAllMembersRequest, out *GetMembersResponse) error
		GetAllRoles(ctx context.Context, in *GuildObjectRequest, out *GetRoleResponse) error
		CreateRole(ctx context.Context, in *CreateRoleRequest, out *CreateRolesResponse) error
		DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *DeleteRoleResponse) error
		EditRole(ctx context.Context, in *EditRoleRequest, out *EditRoleResponse) error
		GetUser(ctx context.Context, in *GetUserRequest, out *GetUserResponse) error
		SendMessage(ctx context.Context, in *SendMessageRequest, out *NilMessage) error
		SendEmbed(ctx context.Context, in *SendMessageEmbed, out *NilMessage) error
	}
	type DiscordGateway struct {
		discordGateway
	}
	h := &discordGatewayHandler{hdlr}
	s.Handle(s.NewHandler(&DiscordGateway{h}, opts...))
}

type discordGatewayHandler struct {
	DiscordGatewayHandler
}

func (h *discordGatewayHandler) UpdateMember(ctx context.Context, in *UpdateMemberRequest, out *UpdateMemberResponse) error {
	return h.DiscordGatewayHandler.UpdateMember(ctx, in, out)
}

func (h *discordGatewayHandler) GetAllMembers(ctx context.Context, in *GetAllMembersRequest, out *GetMembersResponse) error {
	return h.DiscordGatewayHandler.GetAllMembers(ctx, in, out)
}

func (h *discordGatewayHandler) GetAllMembersAsSlice(ctx context.Context, in *GetAllMembersRequest, out *GetMembersResponse) error {
	return h.DiscordGatewayHandler.GetAllMembersAsSlice(ctx, in, out)
}

func (h *discordGatewayHandler) GetAllRoles(ctx context.Context, in *GuildObjectRequest, out *GetRoleResponse) error {
	return h.DiscordGatewayHandler.GetAllRoles(ctx, in, out)
}

func (h *discordGatewayHandler) CreateRole(ctx context.Context, in *CreateRoleRequest, out *CreateRolesResponse) error {
	return h.DiscordGatewayHandler.CreateRole(ctx, in, out)
}

func (h *discordGatewayHandler) DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *DeleteRoleResponse) error {
	return h.DiscordGatewayHandler.DeleteRole(ctx, in, out)
}

func (h *discordGatewayHandler) EditRole(ctx context.Context, in *EditRoleRequest, out *EditRoleResponse) error {
	return h.DiscordGatewayHandler.EditRole(ctx, in, out)
}

func (h *discordGatewayHandler) GetUser(ctx context.Context, in *GetUserRequest, out *GetUserResponse) error {
	return h.DiscordGatewayHandler.GetUser(ctx, in, out)
}

func (h *discordGatewayHandler) SendMessage(ctx context.Context, in *SendMessageRequest, out *NilMessage) error {
	return h.DiscordGatewayHandler.SendMessage(ctx, in, out)
}

func (h *discordGatewayHandler) SendEmbed(ctx context.Context, in *SendMessageEmbed, out *NilMessage) error {
	return h.DiscordGatewayHandler.SendEmbed(ctx, in, out)
}
